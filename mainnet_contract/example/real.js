const RLP = require("rlp");
const util = require("@ethereumjs/util");
const secp256k1 = require("secp256k1");
const HeaderReader = artifacts.require("HeaderReader");
const Subnet = artifacts.require("Subnet");

const hex2Arr = (hexString) => {
  if (hexString.length % 2 !== 0) {
      throw "Must have an even number of hex digits to convert to bytes";
  }
  var numBytes = hexString.length / 2;
  var byteArray = new Uint8Array(numBytes);
  for (var i=0; i<numBytes; i++) {
      byteArray[i] = parseInt(hexString.substr(i*2, 2), 16);
  }
  return byteArray;
}

contract("Subnet Real Sample Test", async accounts => {
  beforeEach(async () => {
    this.validators_addr = [
      "0x888c073313b36cf03CF1f739f39443551Ff12bbE",
      "0x5058dfE24Ef6b537b5bC47116A45F0428DA182fA",
      "0xefEA93e384a6ccAaf28E33790a2D1b2625BF964d"
    ];
    

    this.genesis_encoded = "0xf90296a00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a017df135a4fad193293e2d89501be8a53ae7622310bba56b80b7e57b7580ceb99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb7608084645213d3b89d00000000000000000000000000000000000000000000000000000000000000005058dfe24ef6b537b5bc47116a45f0428da182fa888c073313b36cf03cf1f739f39443551ff12bbeefea93e384a6ccaaf28e33790a2d1b2625bf964d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000088000000000000000080c0c080";
    this.genesis_hash = web3.utils.sha3(Buffer.from(hex2Arr(this.genesis_encoded.slice(2)))).toString("hex");
    this.block1_encoded = "0xf902e7a082c3605bed0c24cf03a45bb146d88e62a67742c122e85686455e2282f2796125a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794888c073313b36cf03cf1f739f39443551ff12bbea0c1dc283417f209d60a1b4a884d4da715781817b5a83a9c642a3e3ef9901a0f38a01b638e0cd65c922db5a78f927aea590dc2f05bfd4f87009396d27030c6a4d029a037677206c85d7bf905a2f29d9380c65c8d6f7231b1c5a36cb628bc5ccc0fe4d0bb100826308846468da3caa02e801e6e3a082c3605bed0c24cf03a45bb146d88e62a67742c122e85686455e2282f27961258080c080a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b8412c0644873d33a0045348ba247d083dbf22ae86cd35403ac6f0cdd3bcf2c71a2a3ba9799b991bf5e1eab2351809e7fc3b4ad54650bc7fcda9c3f5422c11914a8700f83f945058dfe24ef6b537b5bc47116a45f0428da182fa94888c073313b36cf03cf1f739f39443551ff12bbe94efea93e384a6ccaaf28e33790a2d1b2625bf964df83f945058dfe24ef6b537b5bc47116a45f0428da182fa94888c073313b36cf03cf1f739f39443551ff12bbe94efea93e384a6ccaaf28e33790a2d1b2625bf964d80"
    this.block1_hash = web3.utils.sha3(Buffer.from(hex2Arr(this.block1_encoded.slice(2)))).toString("hex");

    this.lib = await HeaderReader.new();
    Subnet.link("HeaderReader", this.lib.address);
    this.subnet = await Subnet.new(
      this.validators_addr,
      this.genesis_encoded,
      this.block1_encoded,
      450,
      900,
      {"from": accounts[0]}
    );
  })

  it("Receive New Header", async() => {

    const block2_encoded = "0xf902f1a085227fb9e3a00b798fd6cda94283f19bdd6dd7e21e185f46fcfe54b4d58bde36a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347945058dfe24ef6b537b5bc47116a45f0428da182faa0cca91743ca785143edd39702cabf95808a25ff37600a324e7439167caf7287a2a0f3a8c013ff3ff60a7aed3bb0ec8d225914988c48186fe0483378cb36acc8e2d3a037677206c85d7bf905a2f29d9380c65c8d6f7231b1c5a36cb628bc5ccc0fe4d0bb100826308846468da59b8b302f8b003f8ade3a085227fb9e3a00b798fd6cda94283f19bdd6dd7e21e185f46fcfe54b4d58bde360101f886b841d222768d52b2ca1cf816d305ee186110bd65c988709cc2c07a3d394ce89ccf1f52368c9a9baf20a5331cd2fd6d995975fd281972b1b66773190e2e3169ddc2ff00b841c07e4dfa759a3ad52a2ee29c8cb33141091d82f508d25945e58372b0aad744e16d0b222dbedfb1cdc96a61cf1e131505987b384e22e96b1b92591a5a5c60d9110080a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b8418e92522c099709c138e82a15ecfeaacfd5cf87320c8547d94d83b94e4805a9605c12f8fc034b0c8f7e9378449092a01e34bf3c7971a0d5bde79c8c84f17a012301c0c080";
    const block2_hash = web3.utils.sha3(Buffer.from(hex2Arr(block2_encoded.slice(2)))).toString("hex");
    await this.subnet.receiveHeader([block2_encoded]);

    const block2_resp = await this.subnet.getHeader(block2_hash);
    const latest_blocks = await this.subnet.getLatestBlocks();
    assert.equal(block2_resp[4], false);
    assert.equal(latest_blocks["0"][0], block2_hash);
    assert.equal(latest_blocks["1"][0], this.block1_hash);
  });

  // it("Receive New Header", async() => {

  //   const block2_encoded = "0xf90339a04a0ccf7e1f17edd8c2005d3da5f5e99c4dca0398a6fe15fb10059edeede8fff2a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794efea93e384a6ccaaf28e33790a2d1b2625bf964da0d69fe3ca3b3a4fc39f30af6b8de51e84a33427136fa7332e91cf327d52602038a06189ebf5a1055c6c4a6b1ccf9cc1db7dd8df672307004a42e661a5406dd95955a037677206c85d7bf905a2f29d9380c65c8d6f7231b1c5a36cb628bc5ccc0fe4d0bff841908b1008263088464345f82b8b902f8b6820708f8b1e7a04a0ccf7e1f17edd8c2005d3da5f5e99c4dca0398a6fe15fb10059edeede8fff28207078206fef886b841db530686dd0118288b305a5c7e7737dfd9b239847dbbdc9904759751d435295d333c081653913df4e4eba7bbb554eece998510f9f6737bd1f95f520ecd6338f201b841fd217a3916887f64394ea07a1d5bc35929c70b8033972637b2b7ae0a6717e15e722473228e5dd833fe9fc6f909fd4182e6a627ed5419498c3ba89216c15e3a530080a00000000000000000000000000000000000000000000000000000000000000000880000000000000000b841424c55b11177aa74b5586a11d72d043eef4ed71e101f5ee3c46d5d9bde8aadeb793d4e593c5c7df7c4af5d4cbb69f38b21d666d5d3952e6fb44b9287c221e14201f83f94efea93e384a6ccaaf28e33790a2d1b2625bf964d94888c073313b36cf03cf1f739f39443551ff12bbe945058dfe24ef6b537b5bc47116a45f0428da182fac080";
  //   console.log(await this.lib.getValidationParams(block2_encoded));
  // });

  it("Confirm A Received Block", async() => {

    const block2_encoded = "0x
    const block2_hash = web3.utils.sha3(Buffer.from(hex2Arr(block2_encoded.slice(2)))).toString("hex");
    const block3_encoded = "0xF902F1A02C4265C60FAA7BE948C2BCF897528B5BE49EE255DC63A59AC485A27A791CE455A01DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D4934794888C073313B36CF03CF1F739F39443551FF12BBEA09A6970490B6842D223465AD201E0D51ADF93FFBC7639947679081897168E63CCA0D3B5C496169AE4BF020007192C85041AD9A67DFEF848CB0BF0122B049E01A563A037677206C85D7BF905A2F29D9380C65C8D6F7231B1C5A36CB628BC5CCC0FE4D0B90100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103841908B1008263088464343A48B8B302F8B004F8ADE3A02C4265C60FAA7BE948C2BCF897528B5BE49EE255DC63A59AC485A27A791CE4550302F886B8413418A10D28A161F27C012288E8894BA59EA03BE35A31AB0773A208D504FE67716BEB8849E3F527E1E489FE5DD28D3B244A9EF61F97D4727A66FEC5B709DF201A01B84166975E377B835A5B5D6997B89595381DF74B908B36DBA755E79CAD2FA805A93E3B45D7C4675139C639845357E80064B56E5FB6BBB9C286C42A6D275A9EC034990180A00000000000000000000000000000000000000000000000000000000000000000880000000000000000B841C19275F72B8DD15D614BAE2FDF603CD04263529D8B1E52B383E048FE3BD0764B22247DE4CEE6FF17443F30F8B39C48E6DEEB21AA700AD4CE99080A868FE8C77B01C0C080";
    const block4_encoded = "0x
    const block5_encoded = "0x
    const block5_hash = web3.utils.sha3(Buffer.from(hex2Arr(block5_encoded.slice(2)))).toString("hex");

    await this.subnet.receiveHeader([block2_encoded, block3_encoded]);
    await this.subnet.receiveHeader([block4_encoded, block5_encoded]);

    const block2_resp = await this.subnet.getHeader(block2_hash);
    const latest_blocks = await this.subnet.getLatestBlocks();
    assert.equal(block2_resp[4], true);
    assert.equal(latest_blocks["0"][0], block5_hash);
    assert.equal(latest_blocks["1"][0], block2_hash);

  });


});