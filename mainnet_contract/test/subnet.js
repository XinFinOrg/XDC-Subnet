const { expect } = require("chai");
const { ethers } = require("hardhat");

const hex2Arr = (hexString) => {
  if (hexString.length % 2 !== 0) {
    throw "Must have an even number of hex digits to convert to bytes";
  }
  var numBytes = hexString.length / 2;
  var byteArray = new Uint8Array(numBytes);
  for (var i = 0; i < numBytes; i++) {
    byteArray[i] = parseInt(hexString.substr(i * 2, 2), 16);
  }
  return byteArray;
};
function blockToHash(blockEncoded) {
  return ethers.utils
    .keccak256(Buffer.from(hex2Arr(blockEncoded.slice(2))))
    .toString("hex");
}

describe("Subnet", () => {
  let subnetTest;
  beforeEach("deploy SubnetTest", async () => {
    const headerReaderFactory = await ethers.getContractFactory("HeaderReader");

    const headerReader = await headerReaderFactory.deploy();
    await headerReader.deployed();
    const factory = await ethers.getContractFactory("Subnet", {
      libraries: {
        HeaderReader: headerReader.address,
      },
    });
    subnetTest = await factory.deploy(
      [
        "0x888c073313b36cf03CF1f739f39443551Ff12bbE",
        "0x5058dfE24Ef6b537b5bC47116A45F0428DA182fA",
        "0xefEA93e384a6ccAaf28E33790a2D1b2625BF964d",
      ],
      "0x7fdd36f7a6b4d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d346b4d5d71ce1d7bc75e73be5deda69bf396f9ebb6fa71c778d5a777d76e39d5bf78f1aef8d777f46b5e367dde34778f77e3bf78d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d346b4d7b75fd77e5ae1f69dd7ddf6f777b677cf79d356def1ae7769eefadb6df5d1b6dae7a6fcd1bedee7b6fbe7cd1c79bf7d6b4e7a7bcd5fd7bd5b71ce796ba7dff37e397baf767347fce9ee5be3c7b4d5bf7de9c69d734d35eb6d9f6f97b7eb76f8db56b4e7a7bcd5fd7bd5b71ce796ba7dff37e397baf767347fce9ee5be3c7b4d5bf7de9c69d734d35eb6d9f6f97b7eb76f8db56fdd35d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d35f34f37e3b6fbeb4f34f38eb8e76d777776fcf5dd34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34e74e7c75f7b6e1e7fa6f9dfb6f96dce3bd75e9ae397f4e36f1d6b5f367daf3cf1cd3bdf7d776f7e9c7f4ddc7f57fbdfd7f7f78e37e79d5f7f5d9b6de79f79af777b7f386ba71c69a7f6f1edf7efdd1ad9dd5bdbadb96dff7ae1dd34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d346b4d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34f3cd34d34d34d34d34d34d34d34f34734734f3",
      "0x7fdd367bb6b4f36737eb4e5b79dd1cdb871fd376b8e5b6f5e3a77cf1eeb66baefbe36735db67bce7af3ae39e5edb6f367f6efdeb5db96b4d5d71ce1d7bc75e73be5deda69bf396f9ebb6fa71c778d5a777d76e39d5bf78f1aef8d777f46b5e367dde34778f77e3bf78f3cf1cd3bdf7d776f7e9c7f4ddc7f57fbdfd7f7f78e37e79d5f7f5d9b6de6b473575cdbcdf8d7b7f6d3d77ad1ad5be1af3ce1de1d6bbd79efcd7cd7b6f96bcddaf5ceb8d9addedde7fdf74d5ad1fdfc6b4d5beb7f1ed1c77ae5cf76d9d6f96bbf1ff76eda79ae7dd1d7367f4e5b7dde1ff3bd34f77f7a776ef4df473a6b8774dbd6b4dfbebbef6d3a73ce5dedb7fdd396b67f6f5df77f3473ae5cf1de9fef6df56f57396b7e9c6fadbc6dce5c71cd1f7b87746fdd35d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d35d35f38d7dd3c6f5d34f36eb7d3cf38eb8ebc75addc69ad367bcd357ba7b76b4f36737eb4e5b79dd1cdb871fd376b8e5b6f5e3a77cf1eeb66baefbe36735db67bce7af3ae39e5edb6f367f6efdeb5db9f34f34734f346b4d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34d34f3cd34d34d34d34d34d34d34d346fce35d9cd3ae38f3bddddf76b4d38e77e3c6dadb8eddd3cddd6dfdb669ef3a71ddf9e34dda73a7f471d7776dc7f673bd5ad9addb6bdefdf5bf7dd5b7f97b579a6f6df9d7cd3d7bb7dcddbe1a779e3ae746dcedf71d6bd7377f9e36d9cd75f75e1af3bd347fcddff78e74e7c75f7b6e1e7fa6f9dfb6f96dce3bd75e9ae397f4e36f1d6b5f367daf78f3cf1cd3bdf7d776f7e9c7f4ddc7f57fbdfd7f7f78e37e79d5f7f5d9b6def7879f79af777b7f386ba71c69a7f6f1edf7efdd1ad9dd5bdbadb96dff7ae1d7fcddff78e74e7c75f7b6e1e7fa6f9dfb6f96dce3bd75e9ae397f4e36f1d6b5f367daf78f3cf1cd3bdf7d776f7e9c7f4ddc7f57fbdfd7f7f78e37e79d5f7f5d9b6def7879f79af777b7f386ba71c69a7f6f1edf7efdd1ad9dd5bdbadb96dff7ae1df34",
      450,
      900
    );
    await subnetTest.deployed();
  });
  describe("Run Test", () => {
    it("Receive New Header", async () => {
      const block2Encoded =
        "0xF902F1A0B09A86862B9BBF90E57A81C7F524D0C71E886F716E204C81FD84266B3B779705A01DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347945058DFE24EF6B537B5BC47116A45F0428DA182FAA02782BC175424ED837DFEA39BCEF34A75C0BAAACA3083ABAFAD631C46D10A9FF1A0D4E0EFE3CBA3CF72038E7E7F04C62D13425706DD8ED0EAE692ADD3E347E4B5CFA037677206C85D7BF905A2F29D9380C65C8D6F7231B1C5A36CB628BC5CCC0FE4D0B90100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102841908B1008263088464343A46B8B302F8B003F8ADE3A0B09A86862B9BBF90E57A81C7F524D0C71E886F716E204C81FD84266B3B7797050201F886B8415DCD791A9C53F145F50AF2FCF46E9E4DB60145B484DB8A2DD6C7431CCDF486133A0BF1BE7F79763B6FD91F06BA9A4C3FAAF1B7CF3236D2388F56785E09C460C300B841F1325D2A58ABA54FAF7E707CC1865E8592315ECCE6F281EC43E71C0C36670D0F13CDCA2BC454C555DB9C1F4447850E21D2F005326F33CE1AFE3F984C3E2EE2980180A00000000000000000000000000000000000000000000000000000000000000000880000000000000000B841F0105FD7F3C8D60EA70995D41C7FF3AC843D4B5901B1C61028CDF59B2F2134F9028914EE0C9A6ED47B57F18A3354FE6673A3D07E4DCE71BF64F30A41ABD6D08701C0C080";
      const block3Encoded =
        "0x
      await subnetTest.receiveHeader([block2Encoded, block3Encoded]);

      const block2Hash = blockToHash(block2Encoded);
      const block3Hash = blockToHash(block3Encoded);
      const block2Resp = await this.subnetTest.getHeader(block2Hash);
      const block3Resp = await this.subnetTest.getHeader(block3Hash);
      const latestBlocks = await this.subnetTest.getLatestBlocks();

      expect(block2Resp[4]).to.eq(true);
      expect(block3Resp[4]).to.eq(true);
      expect(latestBlocks["0"][0]).to.eq(block3Hash);
      expect(latestBlocks["1"][0]).to.eq(block2Hash);
    });
  });
});
